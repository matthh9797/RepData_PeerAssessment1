DB = DB[, "DB.Close"]))
stock_return <- apply(stocks, 1, function(x) {x / stocks[1,]}) %>% t %>% as.xts
stock_change <- stocks %>% log %>% diff
stock_change <- na.omit(stock_change)
# plotting stock returns
library(magrittr)
# create two objects for the return of the stocks and the log-difference
stock_return <- apply(stocks, 1, function(x) {x / stocks[1,]}) %>% t %>% as.xts
stock_change <- stocks %>% log %>% diff
stock_change <- na.omit(stock_change)
library(ggplot2)
# Plot density and hiatogram for Goldman Sachs
ggplot(stock_change, aes(x = GS.Close)) +
geom_histogram(aes(y=..density..), binwidth = .01, color = "black", fill = "white") +
geom_density(alpha = 0.2, fill = "#FF6666") +
geom_vline(aes(xintercept=mean(GS.Close, na.rm = T)), color = "red", linetype = "dashed", size = 1) +
geom_rug()
data <- as.data.frame(stock_change)
stock_change_long <- data.frame(Date = rep(row.names(data), 5),
Change = c(data$GS.Close,
data$JPM.Close,
data$DHY.Close,
data$HSBC.Close,
data$DB.Close),
Stock = c(rep("GS", 2515),
rep("JPM", 2515),
rep("DHY", 2515),
rep("HSBC", 2515),
rep("DB", 2515)))
rm(data)
ggplot(stock_change_long, aes(x = Stock, y = Change, fill = Stock)) +
geom_boxplot() +
coord_flip()
data <- as.data.frame(stock_change)
library(dplyr)
stock_change_long %>% group_by(Stock) %>% summary(mean = mean(Change), sd = sd)
stock_change_long <- transform(stock_change_long, Stock = as.factor(Stock))
stock_change_long %>% group_by(Stock) %>% summarise(Mean = mean(Change), sd = sd(Change))
mean_sd <- stock_change_long %>% group_by(Stock) %>% summarise(Mean = mean(Change), sd = sd(Change))
parameters <- stock_change_long %>% group_by(Stock) %>% summarise(Mean = mean(Change), sd = sd(Change))
mu <- mean(parameters$Mean)
sd <- mean(parameters$sd)
normal <- rnorm(2515, mean = mu, sd = sd)
hist(normal)
data <- as.data.frame(stock_change)
stock_change_long <- data.frame(Date = rep(row.names(data), 6),
stock_change = c(data$GS.Close,
data$JPM.Close,
data$DHY.Close,
data$HSBC.Close,
data$DB.Close,
normal_data),
Stock = c(rep("GS", 2515),
rep("JPM", 2515),
rep("DHY", 2515),
rep("HSBC", 2515),
rep("DB", 2515),
rep("Normal", 2515)))
stock_change_long <- transform(stock_change_long, Stock = as.factor(Stock))
normal_data <- rnorm(2515, mean = parameters$Mean, sd = parameters$sd)
data <- as.data.frame(stock_change)
stock_change_long <- data.frame(Date = rep(row.names(data), 6),
stock_change = c(data$GS.Close,
data$JPM.Close,
data$DHY.Close,
data$HSBC.Close,
data$DB.Close,
normal_data),
Stock = c(rep("GS", 2515),
rep("JPM", 2515),
rep("DHY", 2515),
rep("HSBC", 2515),
rep("DB", 2515),
rep("Normal", 2515)))
stock_change_long <- transform(stock_change_long, Stock = as.factor(Stock))
ggplot(stock_change_long, aes(x = Change, color = Stock)) +
geom_density()
ggplot(stock_change_long, aes(x = stock_change, color = Stock)) +
geom_density()
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
coord_flip()
stock_change_long <- data.frame(Date = rep(row.names(data), 6),
stock_change = c(data$GS.Close,
data$JPM.Close,
normal_data,
data$DHY.Close,
data$HSBC.Close,
data$DB.Close),
Stock = c(rep("GS", 2515),
rep("JPM", 2515),
rep("Normal", 2515),
rep("DHY", 2515),
rep("HSBC", 2515),
rep("DB", 2515)))
stock_change_long <- transform(stock_change_long, Stock = as.factor(Stock))
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
coord_flip()
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
coord_flip()
?geom_vline
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
coord_flip() +
geom_vline(aes(xintercept = c(min(normal_data), max(normal_data))))
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
coord_flip() +
geom_vline(aes(xintercept = c(min(normal_data))))
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
coord_flip() +
geom_vline(aes(xintercept = c(min(normal_data))), color = "red")
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
coord_flip() +
geom_vline(aes(-0.1))
# boxplot
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
coord_flip() +
geom_vline(aes(xintercept=-0.1))
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
coord_flip() +
geom_vline(aes(xintercept=-0.1), color = "red", size = 1)
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
geom_vline(aes(xintercept=-0.1), color = "red", size = 1)
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
coord_flip()
# boxplot
summary_normal <- normal_data %>% summarise(mean = mean(normal_data)
)
min(normal_data)
summary(normal_data)
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
coord_flip() +
geom_vline(data = summary(normal_data), mapping = aes(xintercept=stock_change),color = "blue")
as.data.frame(summary(normal_data)
)
data.frame(Min = summary(normal_data$Min.))
attr(summary(normal_data))
data.frame(Min = min(normal_data))
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
coord_flip() +
geom_vline(xintercept = min(normal_data))
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
geom_hline(xintercept = min(normal_data))
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
geom_hline(yintercept = min(normal_data))
geom_hline
?geom_hline
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
geom_hline(aes(yintercept = c(min(normal_data), max(normal_data))))
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
geom_hline(yintercept = c(min(normal_data), max(normal_data)))
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
geom_hline(yintercept = c(min(normal_data), max(normal_data)),
color = 6)
# boxplot
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
geom_hline(yintercept = c(min(normal_data), max(normal_data)),
color = 6, linetype = "F1", alpha = 0.2)
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
geom_hline(yintercept = c(min(normal_data), max(normal_data)),
color = 6, linetype = "F1", alpha = 0.5)
?summary
summary(normal_data)
summary(normal_data)[["Min."]]
class(summary(normal_data))
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
geom_hline(yintercept = c(summary(normal_data)[["Min."]], summary(normal_data)[["Max."]],
summary(normal_data)[["1st Qu."]], summary(normal_data)[["3rd Qu."]]),
color = 6, linetype = "F1", alpha = 0.5)
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
geom_hline(yintercept = c(summary(normal_data)[["Min."]], summary(normal_data)[["Max."]],
summary(normal_data)[["1st Qu."]], summary(normal_data)[["3rd Qu."]]),
color = "black", linetype = "F1", alpha = 0.5)
?qqplot
qqnorm(stock_change$GS.Close)
qqline
qqline(stock_change$GS.Close, color = "red")
?qqline
qqline(stock_change$GS.Close, col = "red")
qqnorm(stock_change$GS.Close, pch = 1)
qqline(stock_change$GS.Close, col = "steelblue", lwd = 2)
labels(stock_change_long$Stock)
head(stock_change_long)
par(mfrow = c(3,2))
for (i in c("GS", "JPM", "DHY", "HSBC", "DB")) {
qqnorm(subset(stock_change_long, Stock = i)$stock_change,
xlab = "Normal Quantiles", ylab = i)
qqline(subset(stock_change_long, Stock = i)$stock_change,
col = "steelblue")
}
par(mfrow = c(1,5))
for (i in c("GS", "JPM", "DHY", "HSBC", "DB")) {
qqnorm(subset(stock_change_long, Stock = i)$stock_change,
xlab = "Normal Quantiles", ylab = paste0(i, ".Quantiles"))
qqline(subset(stock_change_long, Stock = i)$stock_change,
col = "steelblue")
}
?plot
?qqnorm
?title
# QQplot
par(mfrow = c(1,5), mar = c(4,4,2,1))
for (i in c("GS", "JPM", "DHY", "HSBC", "DB")) {
qqnorm(subset(stock_change_long, Stock = i)$stock_change,
main = "",
xlab = "Normal Quantiles", ylab = paste0(i, ".Quantiles"))
qqline(subset(stock_change_long, Stock = i)$stock_change,
col = "steelblue")
}
qqnorm(subset(stock_change_long, Stock = "JPM")$stock_change,
main = "",
xlab = "Normal Quantiles", ylab = paste0(i, ".Quantiles"))
qqline(subset(stock_change_long, Stock = "JPM")$stock_change,
col = "steelblue")
qqnorm(subset(stock_change_long, Stock = "HSBC")$stock_change,
main = "",
xlab = "Normal Quantiles", ylab = paste0(i, ".Quantiles"))
qqline(subset(stock_change_long, Stock = "HSBC")$stock_change,
col = "steelblue")
ggplot(stock_change_long, aes(sample = stock_change)) + stat_qq() + facet_grid(~ . Stock)
ggplot(stock_change_long, aes(x = stock_change, color = Stock)) +
geom_density()
ggplot(stock_change_long, aes(x = stock_change, color = Stock)) +
geom_density() +
xlim(-0.1, -0.025)
ggplot(stock_change, aes(x = GS.Close)) +
geom_histogram(aes(y=..density..), binwidth = .01, color = "black", fill = "white") +
geom_density(alpha = 0.2, fill = "#FF6666") +
geom_vline(aes(xintercept=mean(GS.Close, na.rm = T)), color = "red", linetype = "dashed", size = 1) +
geom_rug()
ggplot(stock_change_long, aes(x = stock_change, color = Stock)) +
geom_density()
ggplot(subset(stock_change_long, Stock = -normal), aes(x = stock_change, color = Stock)) +
geom_density()
ggplot(subset(stock_change_long, Stock = -Normal), aes(x = stock_change, color = Stock)) +
geom_density()
library(PerformanceAnalytics)
VaR(stock_change)
VaR(stock_change$GS.Close)
?VaR
ES(stock_change)
VaR(stock_change, weights = weights)
VaR(stock_change, portfolio_method = "component")
VaR(stock_change, portfolio_method = "marginal")
VaR(stock_change, portfolio_method = "marginal", weights = weights)
weights
set.seed(1234)
weights <- runif(5)
theta <- sum(weights)
weights <- weights / theta
weight
weights
VaR(stock_change, portfolio_method = "marginal", weights = weights)
VaR(stock_change, portfolio_method = "component")
ES(stock_change, portfolio_method = "component")
ES(stock_change, portfolio_method = "marginal")
ggplot(stock_change_long, aes(x = Stock, y = stock_change, fill = Stock)) +
geom_boxplot() +
geom_hline(yintercept = c(summary(normal_data)[["Min."]], summary(normal_data)[["Max."]],
summary(normal_data)[["1st Qu."]], summary(normal_data)[["3rd Qu."]]),
color = "black", linetype = "F1", alpha = 0.5)
?sample
sample(12,12)
0.9*0.1
0.09/10000
sqrt(0.000009)
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, sep = "|", fixed = TRUE)
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
str(dates)
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63, Site.ID == 2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(median(x0sub, na.rm = TRUE), lwd = 2)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1, na.rm = TRUE), lwd = 2)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, points(rep21,52), mrg[,3])
with(mrg, points(rep2,52), mrg[,3])
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y, ]
1000* (exp(0.2) - 1)
sqrt(4)
sqrt(109/100)
-1
(1 + 0.065)^2
(1 + 0.065)^2 / (1.06)
# 1. get data from the kernlab package
library(kernlab)
data(spam)
head(spam[,1:10])
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, p = 0.5)
trainSpam <- spam[trainIndicator == 1, ]
testSpam <- spam[trainIndicator == 0, ]
#
# 3. cluster analysis for words
hCluster <- hclust(t(dist(trainSpam[, 1:57])))
# the clustering algorithm is sensitive to skewness in the distribution
# of individual variables
hCluster <- hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
trainSpam$numtype <- as.numeric(trainSpam$type) - 1
head(trainSpam$type)
head(trainSpam$numtype)
costFunction(x,y) sum(x != (y > 0.5))
costFunction <- function(x,y) (sum(x != (y > 0.5)))
cvError <- rep(NA, 55)
install.packages(boot)
install.packages("boot")
library(boot)
head(trainSpam)
?reformulate
for (i in 1:55) {
lmFormula <- reformulate(names(trainSpam)[i], response = "numType")
glmFit <- glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] <- cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
for (i in 1:55) {
lmFormula <- reformulate(names(trainSpam)[i], response = "numtype")
glmFit <- glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] <- cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
predictionModel = glm(numtype ~ charDollar, family = "binomial", data = trainSpam)
# get prediction on the test set
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
# classify as 'spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted > 0.5] = "spam"
sample(1:18)
length(sample(1:18))
sample(1:18)
setwd("C:/Users/MattH/dataScience/courses/johnHopkins/5-reproducable-research/week-2/project")
# Q1. Read and Process the data
activity <- read.csv("data/activity.csv")
head(activity)
str(activity)
# transform the variables
activity <- transform(activity, date = as.Date(date, "%Y-%m-%d"), interval = as.factor(interval))
# pluck out the variables
steps_na <- activity$steps
date <- activity$date
interval <- activity$interval
# Histogram of total steps taken by day
tot_na <- tapply(steps_na, date, sum, na.rm = T)
hist(tot_na, xlab = "Total Steps per Day", main = "Histogram of Total Number of Steps taken per Day")
# transform the variables
activity <- transform(activity, date = as.Date(date, "%Y-%m-%d"), interval = as.factor(interval))
# Q3. Mean and Median steps by day
mn0_date <- tapply(steps_na, date, mean, na.rm = T)
md0_date <- tapply(steps_na, date, median, na.rm = T)
## Maybe make a table?
mn0_int <- tapply(steps_na, interval, mean, na.rm = T)
plot(names(mn0_int), mn0_int, type = "l", xlab = "Mean steps per 5-minute interval",
main = "Time Series of Mean Number of Steps Taken per 5-minute Interval")
# Q5. The 5-minute interval that contains the max
# number of steps om average
which.max(mn0_int)
# Q6. Imputing missing values
sum(is.na(activity))
activity <- transform(activity, mean = mn0_int[interval])
steps <- steps_na
steps[is.na(steps)] <- activity$mean[is.na(steps)]
activity$steps <- steps
sum(is.na(activity))
# create histogram
par(mfrow = c(1,2), oma = c(0,0,2,0), mar = c(5,4,2,1))
tot <- tapply(steps, date, sum, na.rm = T)
hist(tot_na, xlab = "Total number of steps", main = "Histogram with NA's")
hist(tot, xlab = "Total number of steps", main = "Histogram without NA's")
mtext("Comparison of total number of steps with NA's Filled in", outer = TRUE, cex = 1.5)
# mean and median
mn1_date <- tapply(steps, date, mean)
md1_date <- tapply(steps, date, mean)
diff_mn <- mn0_date - mn1_date
diff_md <- md0_date - md1_date
barplot(diff_mn)
hist(diff_mn)
hist(diff_md)
bar(diff_md)
barplot(diff_md)
barplot(diff_mn)
weekend <- c("Saturday", "Sunday")
day <- weekdays(date)
is.weekend <- day %in% weekend
week <- as.numeric(is.weekend)
lbls <- c("Weekday", "Weekend")
# week is a factor variable with weekday or weekend
week <- factor(week, labels = lbls)
# plot weekday against weekend
activity$week <- week
library(dplyr)
mean_wd <- mean_week$mean[mean_week$week == "Weekday"]
names(mean_wd) <- mean_week$interval[mean_week$week == "Weekday"]
mean_we <- mean_week$mean[mean_week$week == "Weekend"]
names(mean_we) <- mean_week$interval[mean_week$week == "Weekend"]
plot(names(mean_wd), mean_wd, type = "l")
plot(names(mean_we), mean_we, type = "l")
mean_week <- activity %>% group_by(week, interval) %>% summarise(mean = mean(steps, na.rm = TRUE))
head(activity)
head(mean_week)
mn_wd <- mean_week$mean[mean_week$week == "Weekday"]
names(mean_wd) <- mean_week$interval[mean_week$week == "Weekday"]
mean_we <- mean_week$mean[mean_week$week == "Weekend"]
names(mean_we) <- mean_week$interval[mean_week$week == "Weekend"]
plot(names(mean_wd), mean_wd, type = "l")
plot(names(mean_we), mean_we, type = "l")
mean_wd <- mean_week$mean[mean_week$week == "Weekday"]
names(mean_wd) <- mean_week$interval[mean_week$week == "Weekday"]
mean_we <- mean_week$mean[mean_week$week == "Weekend"]
names(mean_we) <- mean_week$interval[mean_week$week == "Weekend"]
plot(names(mean_wd), mean_wd, type = "l")
plot(names(mean_we), mean_we, type = "l")
plot(names(mean_wd), mean_wd, type = "l", xlab = "5-minute Interval", ylab = "Mean Steps",
main = "Mean Steps on a Weekday")
plot(names(mean_we), mean_we, type = "l", xlab = "5-minute Interval", ylab = "Mean Steps",
main = "Mean Steps on the Weekend")
mtext("Comparison of Step Count on the Weekend or a Weekday", outer = TRUE, cex = 1.5)
sum(is.na(activity))
activity_nona <- read.csv("data/activity.csv")
head(activity_nona)
activity_nona$steps <- steps
head(activity_nona)
rm(list = ls())
install.packages("xtable")
?xtable
library(xtable)
?xtable
library(knitr)
?knit2html
source('~/.active-rstudio-document', echo=TRUE)
setwd("C:/Users/MattH/dataScience/courses/johnHopkins/5-reproducable-research/week-2/assignment")
knit2html("PA1.md")
?knit2html
knit2html("PA1.md", output = "PA1.html")
